The NOP grammar is expression-based, like in all Lisps. Below is the formal
definition of the grammar.

SExp:			Literal | Symbol | List ( SExp* )
		
Definition			TypeDefinition | MemberDefinition
TypeDefinition:		List ( Symbol("type") Symbol Definition* )
MemberDefinition:	List ( Symbol("def") VariableExpression Expression )

Expression:		SymbolExpression | 
				LiteralExpression |
				QuoteExpression |
				IfExpression |
				DefineExpression |
				LambdaExpression |
				SetExpression |
				FunctionCallExpression
		
LiteralExpression:		Literal
SymbolExpression: 		Symbol
QuoteExpression: 		List ( Symbol("quote") Expression )
IfExpression:			List ( Symbol("if") Expression Expression Expression )
DefineExpression:		List ( Symbol("let") VariableExpression Expression )
LambdaExpression:		List ( Symbol("lambda") List ( VariableExpression* ) Expression+ )
SetExpression:			List ( Symbol("set!") VariableExpression Expression )
FunctionCallExpression: List ( Expression+ )
VariableExpresson:		SymbolExpression | 
						List ( SymbolExpression TypeExpression )
TypeExpression:			BasicTypeExpression | 
						GenericTypeExpression | 
						LambdaTypeExpression 
BasicTypeExpression:	SymbolExpression
GenericTypeExpression:	List ( SymbolExpression TypeExpression+ )
LambdaTypeExpression:	List ( Symbol("->") TypeExpression TypeExpression )