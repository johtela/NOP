Below is the formal definition of NOP grammar.

SExp:			Literal | Symbol | List ( SExp* )
		
Definition			List ( TypeDefinition | MemberDefinition )
TypeDefinition:		Symbol("type") SymbolExpression Definition*
MemberDefinition:	Symbol("def") TypedVariableDefinition Expression

Expression:		SymbolExpression | 
				LiteralExpression |
				List (	QuoteExpression |
						IfExpression |
						LetExpression |
						LambdaExpression |
						SetExpression |
						FunctionCallExpression )
		
LiteralExpression:		Literal
SymbolExpression: 		Symbol
QuoteExpression: 		Symbol("quote") Expression
IfExpression:			Symbol("if") Expression Expression Expression
LetExpression:			Symbol("let") VariableDefinition Expression
LambdaExpression:		Symbol("lambda") List ( VariableDefinition* ) Expression
SetExpression:			Symbol("set!") Symbol Expression
FunctionCallExpression: Expression+
VariableDefinition:		SymbolExpression | 
						TypedVariableDefinition
TypedVariableDefinition:List ( SymbolExpression TypeReference )
TypeReference:			BasicTypeRefence | 
						List (	GenericTypeReference | 
								LambdaTypeReference )
BasicTypeReference:		SymbolExpression
LambdaTypeReference:	Symbol("->") TypeReference TypeReference
GenericTypeReference:	SymbolExpression TypeReference+


a<T>.m (int) ===> a.m<T>(this a<T>, int)