The NOP grammar is expression-based, like in all Lisps. Below is the formal
definition of the grammar.

SExp:			Literal | Symbol | List ( SExp* )
			 	
Expression:		AtomExpression | ListExpression

AtomExpression: SymbolExpression | LiteralExpression
				
LiteralExpression:		Literal
SymbolExpression: 		Symbol

ListExpression:	QuoteExpression |
				IfExpression |
				DefineExpression |
				LambdaExpression |
				SetExpression |
				FunctionCallExpression
				
QuoteExpression: 		List ( Symbol("quote") Expression )
IfExpression:			List ( Symbol("if") Expression Expression Expression )
DefineExpression:		List ( Symbol("let") VariableExpression Expression )
LambdaExpression:		List ( Symbol("lambda") List ( VariableExpression* ) Expression+ )
SetExpression:			List ( Symbol("set!") VariableExpression Expression )
FunctionCallExpression: List ( Expression+ )
VariableExpresson:		Symbol [ Symbol(":") TypeExpression ]
TypeExpression:			Symbol [ List ( TypeExpression ) | Symbol("->") TypeExpression ]
ClassExpression:		List ( Symbol("module") Symbol MemberExpression* )
DefinitionExpression:	List ( Symbol("def") VariableExpression Expression )

(module <Symbol>
	(def <Symbol> <Expr>)
	(def <Symbol> : <Type> <Expr>)
)